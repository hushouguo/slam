1. excel to lua, csv
2. curl for lua
3. http server for lua
4. gatewayserver
5. performance test
6. when remove timer, cancel lua reference
7. test multi-thread exclusion
8. hotfix
9. onSocketAccept, onClientConnected, onSocketShutdown event callback
10. orderserver
11. monitor
12. control server
13. reload config
14. buildinfo.h : slam
15. config macro in config.h
17. APIs and document
链接断掉的回调与处理

需要csv loader，因为可以reload, 可以把excel导成jason，服务器用 json来读取

Note 1: Rank之类的需求需要额外的service来遍历所有数据库对象，生成rank, objectManager需要提供获取所有数据的接口
Note 2: 分库分表的考虑, 只分库，不分表
Note 3: 通过传递lamda来通知链接的断开是不可以的

			const void* allocateMessage(size_t payload_len) override;
			void releaseMessage(const void* msg) override;
			void setMessageContent(const void* msg, const void* data, size_t len) override;
			const void* getMessageContent(const void* msg, size_t* len) override;
			SOCKET getMessageSocket(const void* msg) override;

			名字要换一下


StorageServer
1. 8 threads: 通过entityid来dispatch, 每个线程拥有自己的面对所有数据库的独立连接
2. 每个线程，一个WorkerProcess, 拥有自己的entityManager缓存, 分库分表

CentralServer
转发，匹配，缓存在线玩家，排行，社交数据维护，逻辑单线程即可

SceneServer
1. 逻辑多线程，如果是开房间的方式，开启线程池，来运行游戏逻辑
2. 看需求而定，游戏逻辑可以用lua来编写，看看需要多少接口
3. 多线程来跑游戏逻辑需要考虑互斥的地方


