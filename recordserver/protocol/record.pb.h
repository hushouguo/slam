// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef PROTOBUF_INCLUDED_record_2eproto
#define PROTOBUF_INCLUDED_record_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_record_2eproto 

namespace protobuf_record_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_record_2eproto
namespace record {
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class EntityCreateRequest;
class EntityCreateRequestDefaultTypeInternal;
extern EntityCreateRequestDefaultTypeInternal _EntityCreateRequest_default_instance_;
class EntityCreateResponse;
class EntityCreateResponseDefaultTypeInternal;
extern EntityCreateResponseDefaultTypeInternal _EntityCreateResponse_default_instance_;
class EntityDeleteRequest;
class EntityDeleteRequestDefaultTypeInternal;
extern EntityDeleteRequestDefaultTypeInternal _EntityDeleteRequest_default_instance_;
class EntityDeleteResponse;
class EntityDeleteResponseDefaultTypeInternal;
extern EntityDeleteResponseDefaultTypeInternal _EntityDeleteResponse_default_instance_;
class EntityRetrieveRequest;
class EntityRetrieveRequestDefaultTypeInternal;
extern EntityRetrieveRequestDefaultTypeInternal _EntityRetrieveRequest_default_instance_;
class EntityRetrieveResponse;
class EntityRetrieveResponseDefaultTypeInternal;
extern EntityRetrieveResponseDefaultTypeInternal _EntityRetrieveResponse_default_instance_;
class EntitySelectRequest;
class EntitySelectRequestDefaultTypeInternal;
extern EntitySelectRequestDefaultTypeInternal _EntitySelectRequest_default_instance_;
class EntitySelectResponse;
class EntitySelectResponseDefaultTypeInternal;
extern EntitySelectResponseDefaultTypeInternal _EntitySelectResponse_default_instance_;
class EntityUpdateRequest;
class EntityUpdateRequestDefaultTypeInternal;
extern EntityUpdateRequestDefaultTypeInternal _EntityUpdateRequest_default_instance_;
class EntityUpdateResponse;
class EntityUpdateResponseDefaultTypeInternal;
extern EntityUpdateResponseDefaultTypeInternal _EntityUpdateResponse_default_instance_;
class Entity_ValuesEntry_DoNotUse;
class Entity_ValuesEntry_DoNotUseDefaultTypeInternal;
extern Entity_ValuesEntry_DoNotUseDefaultTypeInternal _Entity_ValuesEntry_DoNotUse_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace record
namespace google {
namespace protobuf {
template<> ::record::Entity* Arena::CreateMaybeMessage<::record::Entity>(Arena*);
template<> ::record::EntityCreateRequest* Arena::CreateMaybeMessage<::record::EntityCreateRequest>(Arena*);
template<> ::record::EntityCreateResponse* Arena::CreateMaybeMessage<::record::EntityCreateResponse>(Arena*);
template<> ::record::EntityDeleteRequest* Arena::CreateMaybeMessage<::record::EntityDeleteRequest>(Arena*);
template<> ::record::EntityDeleteResponse* Arena::CreateMaybeMessage<::record::EntityDeleteResponse>(Arena*);
template<> ::record::EntityRetrieveRequest* Arena::CreateMaybeMessage<::record::EntityRetrieveRequest>(Arena*);
template<> ::record::EntityRetrieveResponse* Arena::CreateMaybeMessage<::record::EntityRetrieveResponse>(Arena*);
template<> ::record::EntitySelectRequest* Arena::CreateMaybeMessage<::record::EntitySelectRequest>(Arena*);
template<> ::record::EntitySelectResponse* Arena::CreateMaybeMessage<::record::EntitySelectResponse>(Arena*);
template<> ::record::EntityUpdateRequest* Arena::CreateMaybeMessage<::record::EntityUpdateRequest>(Arena*);
template<> ::record::EntityUpdateResponse* Arena::CreateMaybeMessage<::record::EntityUpdateResponse>(Arena*);
template<> ::record::Entity_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::record::Entity_ValuesEntry_DoNotUse>(Arena*);
template<> ::record::Value* Arena::CreateMaybeMessage<::record::Value>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace record {

enum Value_ValueType {
  Value_ValueType_type_s8 = 0,
  Value_ValueType_type_u8 = 1,
  Value_ValueType_type_s32 = 2,
  Value_ValueType_type_u32 = 3,
  Value_ValueType_type_s64 = 4,
  Value_ValueType_type_u64 = 5,
  Value_ValueType_type_bool = 6,
  Value_ValueType_type_float = 7,
  Value_ValueType_type_double = 8,
  Value_ValueType_type_string = 9,
  Value_ValueType_type_bytes = 10,
  Value_ValueType_type_datetime = 11,
  Value_ValueType_Value_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Value_ValueType_Value_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Value_ValueType_IsValid(int value);
const Value_ValueType Value_ValueType_ValueType_MIN = Value_ValueType_type_s8;
const Value_ValueType Value_ValueType_ValueType_MAX = Value_ValueType_type_datetime;
const int Value_ValueType_ValueType_ARRAYSIZE = Value_ValueType_ValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Value_ValueType_descriptor();
inline const ::std::string& Value_ValueType_Name(Value_ValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Value_ValueType_descriptor(), value);
}
inline bool Value_ValueType_Parse(
    const ::std::string& name, Value_ValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Value_ValueType>(
    Value_ValueType_descriptor(), name, value);
}
// ===================================================================

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(NULL);
  }

  Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Value_ValueType ValueType;
  static const ValueType type_s8 =
    Value_ValueType_type_s8;
  static const ValueType type_u8 =
    Value_ValueType_type_u8;
  static const ValueType type_s32 =
    Value_ValueType_type_s32;
  static const ValueType type_u32 =
    Value_ValueType_type_u32;
  static const ValueType type_s64 =
    Value_ValueType_type_s64;
  static const ValueType type_u64 =
    Value_ValueType_type_u64;
  static const ValueType type_bool =
    Value_ValueType_type_bool;
  static const ValueType type_float =
    Value_ValueType_type_float;
  static const ValueType type_double =
    Value_ValueType_type_double;
  static const ValueType type_string =
    Value_ValueType_type_string;
  static const ValueType type_bytes =
    Value_ValueType_type_bytes;
  static const ValueType type_datetime =
    Value_ValueType_type_datetime;
  static inline bool ValueType_IsValid(int value) {
    return Value_ValueType_IsValid(value);
  }
  static const ValueType ValueType_MIN =
    Value_ValueType_ValueType_MIN;
  static const ValueType ValueType_MAX =
    Value_ValueType_ValueType_MAX;
  static const int ValueType_ARRAYSIZE =
    Value_ValueType_ValueType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValueType_descriptor() {
    return Value_ValueType_descriptor();
  }
  static inline const ::std::string& ValueType_Name(ValueType value) {
    return Value_ValueType_Name(value);
  }
  static inline bool ValueType_Parse(const ::std::string& name,
      ValueType* value) {
    return Value_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string value_string = 11;
  void clear_value_string();
  static const int kValueStringFieldNumber = 11;
  const ::std::string& value_string() const;
  void set_value_string(const ::std::string& value);
  #if LANG_CXX11
  void set_value_string(::std::string&& value);
  #endif
  void set_value_string(const char* value);
  void set_value_string(const char* value, size_t size);
  ::std::string* mutable_value_string();
  ::std::string* release_value_string();
  void set_allocated_value_string(::std::string* value_string);

  // bytes value_bytes = 12;
  void clear_value_bytes();
  static const int kValueBytesFieldNumber = 12;
  const ::std::string& value_bytes() const;
  void set_value_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_value_bytes(::std::string&& value);
  #endif
  void set_value_bytes(const char* value);
  void set_value_bytes(const void* value, size_t size);
  ::std::string* mutable_value_bytes();
  ::std::string* release_value_bytes();
  void set_allocated_value_bytes(::std::string* value_bytes);

  // string value_datetime = 13;
  void clear_value_datetime();
  static const int kValueDatetimeFieldNumber = 13;
  const ::std::string& value_datetime() const;
  void set_value_datetime(const ::std::string& value);
  #if LANG_CXX11
  void set_value_datetime(::std::string&& value);
  #endif
  void set_value_datetime(const char* value);
  void set_value_datetime(const char* value, size_t size);
  ::std::string* mutable_value_datetime();
  ::std::string* release_value_datetime();
  void set_allocated_value_datetime(::std::string* value_datetime);

  // .record.Value.ValueType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::record::Value_ValueType type() const;
  void set_type(::record::Value_ValueType value);

  // sint32 value_s8 = 2;
  void clear_value_s8();
  static const int kValueS8FieldNumber = 2;
  ::google::protobuf::int32 value_s8() const;
  void set_value_s8(::google::protobuf::int32 value);

  // uint32 value_u8 = 3;
  void clear_value_u8();
  static const int kValueU8FieldNumber = 3;
  ::google::protobuf::uint32 value_u8() const;
  void set_value_u8(::google::protobuf::uint32 value);

  // sint32 value_s32 = 4;
  void clear_value_s32();
  static const int kValueS32FieldNumber = 4;
  ::google::protobuf::int32 value_s32() const;
  void set_value_s32(::google::protobuf::int32 value);

  // sint64 value_s64 = 6;
  void clear_value_s64();
  static const int kValueS64FieldNumber = 6;
  ::google::protobuf::int64 value_s64() const;
  void set_value_s64(::google::protobuf::int64 value);

  // uint32 value_u32 = 5;
  void clear_value_u32();
  static const int kValueU32FieldNumber = 5;
  ::google::protobuf::uint32 value_u32() const;
  void set_value_u32(::google::protobuf::uint32 value);

  // bool value_bool = 8;
  void clear_value_bool();
  static const int kValueBoolFieldNumber = 8;
  bool value_bool() const;
  void set_value_bool(bool value);

  // uint64 value_u64 = 7;
  void clear_value_u64();
  static const int kValueU64FieldNumber = 7;
  ::google::protobuf::uint64 value_u64() const;
  void set_value_u64(::google::protobuf::uint64 value);

  // double value_double = 10;
  void clear_value_double();
  static const int kValueDoubleFieldNumber = 10;
  double value_double() const;
  void set_value_double(double value);

  // float value_float = 9;
  void clear_value_float();
  static const int kValueFloatFieldNumber = 9;
  float value_float() const;
  void set_value_float(float value);

  // @@protoc_insertion_point(class_scope:record.Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_string_;
  ::google::protobuf::internal::ArenaStringPtr value_bytes_;
  ::google::protobuf::internal::ArenaStringPtr value_datetime_;
  int type_;
  ::google::protobuf::int32 value_s8_;
  ::google::protobuf::uint32 value_u8_;
  ::google::protobuf::int32 value_s32_;
  ::google::protobuf::int64 value_s64_;
  ::google::protobuf::uint32 value_u32_;
  bool value_bool_;
  ::google::protobuf::uint64 value_u64_;
  double value_double_;
  float value_float_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Entity_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Entity_ValuesEntry_DoNotUse, 
    ::std::string, ::record::Value,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Entity_ValuesEntry_DoNotUse, 
    ::std::string, ::record::Value,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Entity_ValuesEntry_DoNotUse();
  Entity_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Entity_ValuesEntry_DoNotUse& other);
  static const Entity_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Entity_ValuesEntry_DoNotUse*>(&_Entity_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Entity* other);
  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const final {
    return CreateMaybeMessage<Entity>(NULL);
  }

  Entity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .record.Value> values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::record::Value >&
      values() const;
  ::google::protobuf::Map< ::std::string, ::record::Value >*
      mutable_values();

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:record.Entity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Entity_ValuesEntry_DoNotUse,
      ::std::string, ::record::Value,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > values_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityCreateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityCreateRequest) */ {
 public:
  EntityCreateRequest();
  virtual ~EntityCreateRequest();

  EntityCreateRequest(const EntityCreateRequest& from);

  inline EntityCreateRequest& operator=(const EntityCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityCreateRequest(EntityCreateRequest&& from) noexcept
    : EntityCreateRequest() {
    *this = ::std::move(from);
  }

  inline EntityCreateRequest& operator=(EntityCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityCreateRequest* internal_default_instance() {
    return reinterpret_cast<const EntityCreateRequest*>(
               &_EntityCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EntityCreateRequest* other);
  friend void swap(EntityCreateRequest& a, EntityCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityCreateRequest* New() const final {
    return CreateMaybeMessage<EntityCreateRequest>(NULL);
  }

  EntityCreateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityCreateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityCreateRequest& from);
  void MergeFrom(const EntityCreateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .record.Entity entity = 3;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 3;
  private:
  const ::record::Entity& _internal_entity() const;
  public:
  const ::record::Entity& entity() const;
  ::record::Entity* release_entity();
  ::record::Entity* mutable_entity();
  void set_allocated_entity(::record::Entity* entity);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityCreateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::record::Entity* entity_;
  ::google::protobuf::uint32 shard_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityCreateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityCreateResponse) */ {
 public:
  EntityCreateResponse();
  virtual ~EntityCreateResponse();

  EntityCreateResponse(const EntityCreateResponse& from);

  inline EntityCreateResponse& operator=(const EntityCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityCreateResponse(EntityCreateResponse&& from) noexcept
    : EntityCreateResponse() {
    *this = ::std::move(from);
  }

  inline EntityCreateResponse& operator=(EntityCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityCreateResponse* internal_default_instance() {
    return reinterpret_cast<const EntityCreateResponse*>(
               &_EntityCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EntityCreateResponse* other);
  friend void swap(EntityCreateResponse& a, EntityCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityCreateResponse* New() const final {
    return CreateMaybeMessage<EntityCreateResponse>(NULL);
  }

  EntityCreateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityCreateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityCreateResponse& from);
  void MergeFrom(const EntityCreateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // uint64 entityid = 3;
  void clear_entityid();
  static const int kEntityidFieldNumber = 3;
  ::google::protobuf::uint64 entityid() const;
  void set_entityid(::google::protobuf::uint64 value);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityCreateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint32 shard_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityRetrieveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityRetrieveRequest) */ {
 public:
  EntityRetrieveRequest();
  virtual ~EntityRetrieveRequest();

  EntityRetrieveRequest(const EntityRetrieveRequest& from);

  inline EntityRetrieveRequest& operator=(const EntityRetrieveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityRetrieveRequest(EntityRetrieveRequest&& from) noexcept
    : EntityRetrieveRequest() {
    *this = ::std::move(from);
  }

  inline EntityRetrieveRequest& operator=(EntityRetrieveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityRetrieveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityRetrieveRequest* internal_default_instance() {
    return reinterpret_cast<const EntityRetrieveRequest*>(
               &_EntityRetrieveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(EntityRetrieveRequest* other);
  friend void swap(EntityRetrieveRequest& a, EntityRetrieveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityRetrieveRequest* New() const final {
    return CreateMaybeMessage<EntityRetrieveRequest>(NULL);
  }

  EntityRetrieveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityRetrieveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityRetrieveRequest& from);
  void MergeFrom(const EntityRetrieveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityRetrieveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // uint64 entityid = 3;
  void clear_entityid();
  static const int kEntityidFieldNumber = 3;
  ::google::protobuf::uint64 entityid() const;
  void set_entityid(::google::protobuf::uint64 value);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityRetrieveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint32 shard_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityRetrieveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityRetrieveResponse) */ {
 public:
  EntityRetrieveResponse();
  virtual ~EntityRetrieveResponse();

  EntityRetrieveResponse(const EntityRetrieveResponse& from);

  inline EntityRetrieveResponse& operator=(const EntityRetrieveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityRetrieveResponse(EntityRetrieveResponse&& from) noexcept
    : EntityRetrieveResponse() {
    *this = ::std::move(from);
  }

  inline EntityRetrieveResponse& operator=(EntityRetrieveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityRetrieveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityRetrieveResponse* internal_default_instance() {
    return reinterpret_cast<const EntityRetrieveResponse*>(
               &_EntityRetrieveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(EntityRetrieveResponse* other);
  friend void swap(EntityRetrieveResponse& a, EntityRetrieveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityRetrieveResponse* New() const final {
    return CreateMaybeMessage<EntityRetrieveResponse>(NULL);
  }

  EntityRetrieveResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityRetrieveResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityRetrieveResponse& from);
  void MergeFrom(const EntityRetrieveResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityRetrieveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .record.Entity entity = 3;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 3;
  private:
  const ::record::Entity& _internal_entity() const;
  public:
  const ::record::Entity& entity() const;
  ::record::Entity* release_entity();
  ::record::Entity* mutable_entity();
  void set_allocated_entity(::record::Entity* entity);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityRetrieveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::record::Entity* entity_;
  ::google::protobuf::uint32 shard_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityUpdateRequest) */ {
 public:
  EntityUpdateRequest();
  virtual ~EntityUpdateRequest();

  EntityUpdateRequest(const EntityUpdateRequest& from);

  inline EntityUpdateRequest& operator=(const EntityUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityUpdateRequest(EntityUpdateRequest&& from) noexcept
    : EntityUpdateRequest() {
    *this = ::std::move(from);
  }

  inline EntityUpdateRequest& operator=(EntityUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const EntityUpdateRequest*>(
               &_EntityUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(EntityUpdateRequest* other);
  friend void swap(EntityUpdateRequest& a, EntityUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityUpdateRequest* New() const final {
    return CreateMaybeMessage<EntityUpdateRequest>(NULL);
  }

  EntityUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityUpdateRequest& from);
  void MergeFrom(const EntityUpdateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .record.Entity entity = 3;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 3;
  private:
  const ::record::Entity& _internal_entity() const;
  public:
  const ::record::Entity& entity() const;
  ::record::Entity* release_entity();
  ::record::Entity* mutable_entity();
  void set_allocated_entity(::record::Entity* entity);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::record::Entity* entity_;
  ::google::protobuf::uint32 shard_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityUpdateResponse) */ {
 public:
  EntityUpdateResponse();
  virtual ~EntityUpdateResponse();

  EntityUpdateResponse(const EntityUpdateResponse& from);

  inline EntityUpdateResponse& operator=(const EntityUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityUpdateResponse(EntityUpdateResponse&& from) noexcept
    : EntityUpdateResponse() {
    *this = ::std::move(from);
  }

  inline EntityUpdateResponse& operator=(EntityUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const EntityUpdateResponse*>(
               &_EntityUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(EntityUpdateResponse* other);
  friend void swap(EntityUpdateResponse& a, EntityUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityUpdateResponse* New() const final {
    return CreateMaybeMessage<EntityUpdateResponse>(NULL);
  }

  EntityUpdateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityUpdateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityUpdateResponse& from);
  void MergeFrom(const EntityUpdateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:record.EntityUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::uint32 shard_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityDeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityDeleteRequest) */ {
 public:
  EntityDeleteRequest();
  virtual ~EntityDeleteRequest();

  EntityDeleteRequest(const EntityDeleteRequest& from);

  inline EntityDeleteRequest& operator=(const EntityDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityDeleteRequest(EntityDeleteRequest&& from) noexcept
    : EntityDeleteRequest() {
    *this = ::std::move(from);
  }

  inline EntityDeleteRequest& operator=(EntityDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const EntityDeleteRequest*>(
               &_EntityDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(EntityDeleteRequest* other);
  friend void swap(EntityDeleteRequest& a, EntityDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityDeleteRequest* New() const final {
    return CreateMaybeMessage<EntityDeleteRequest>(NULL);
  }

  EntityDeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityDeleteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityDeleteRequest& from);
  void MergeFrom(const EntityDeleteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityDeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // uint64 entityid = 3;
  void clear_entityid();
  static const int kEntityidFieldNumber = 3;
  ::google::protobuf::uint64 entityid() const;
  void set_entityid(::google::protobuf::uint64 value);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityDeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint32 shard_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityDeleteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityDeleteResponse) */ {
 public:
  EntityDeleteResponse();
  virtual ~EntityDeleteResponse();

  EntityDeleteResponse(const EntityDeleteResponse& from);

  inline EntityDeleteResponse& operator=(const EntityDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityDeleteResponse(EntityDeleteResponse&& from) noexcept
    : EntityDeleteResponse() {
    *this = ::std::move(from);
  }

  inline EntityDeleteResponse& operator=(EntityDeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityDeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const EntityDeleteResponse*>(
               &_EntityDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(EntityDeleteResponse* other);
  friend void swap(EntityDeleteResponse& a, EntityDeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityDeleteResponse* New() const final {
    return CreateMaybeMessage<EntityDeleteResponse>(NULL);
  }

  EntityDeleteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityDeleteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityDeleteResponse& from);
  void MergeFrom(const EntityDeleteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityDeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:record.EntityDeleteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::uint32 shard_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntitySelectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntitySelectRequest) */ {
 public:
  EntitySelectRequest();
  virtual ~EntitySelectRequest();

  EntitySelectRequest(const EntitySelectRequest& from);

  inline EntitySelectRequest& operator=(const EntitySelectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntitySelectRequest(EntitySelectRequest&& from) noexcept
    : EntitySelectRequest() {
    *this = ::std::move(from);
  }

  inline EntitySelectRequest& operator=(EntitySelectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntitySelectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntitySelectRequest* internal_default_instance() {
    return reinterpret_cast<const EntitySelectRequest*>(
               &_EntitySelectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(EntitySelectRequest* other);
  friend void swap(EntitySelectRequest& a, EntitySelectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntitySelectRequest* New() const final {
    return CreateMaybeMessage<EntitySelectRequest>(NULL);
  }

  EntitySelectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntitySelectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntitySelectRequest& from);
  void MergeFrom(const EntitySelectRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntitySelectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string where = 3;
  void clear_where();
  static const int kWhereFieldNumber = 3;
  const ::std::string& where() const;
  void set_where(const ::std::string& value);
  #if LANG_CXX11
  void set_where(::std::string&& value);
  #endif
  void set_where(const char* value);
  void set_where(const char* value, size_t size);
  ::std::string* mutable_where();
  ::std::string* release_where();
  void set_allocated_where(::std::string* where);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntitySelectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr where_;
  ::google::protobuf::uint32 shard_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntitySelectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntitySelectResponse) */ {
 public:
  EntitySelectResponse();
  virtual ~EntitySelectResponse();

  EntitySelectResponse(const EntitySelectResponse& from);

  inline EntitySelectResponse& operator=(const EntitySelectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntitySelectResponse(EntitySelectResponse&& from) noexcept
    : EntitySelectResponse() {
    *this = ::std::move(from);
  }

  inline EntitySelectResponse& operator=(EntitySelectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntitySelectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntitySelectResponse* internal_default_instance() {
    return reinterpret_cast<const EntitySelectResponse*>(
               &_EntitySelectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(EntitySelectResponse* other);
  friend void swap(EntitySelectResponse& a, EntitySelectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntitySelectResponse* New() const final {
    return CreateMaybeMessage<EntitySelectResponse>(NULL);
  }

  EntitySelectResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntitySelectResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntitySelectResponse& from);
  void MergeFrom(const EntitySelectResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntitySelectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .record.Entity entities = 3;
  bool has_entities() const;
  void clear_entities();
  static const int kEntitiesFieldNumber = 3;
  private:
  const ::record::Entity& _internal_entities() const;
  public:
  const ::record::Entity& entities() const;
  ::record::Entity* release_entities();
  ::record::Entity* mutable_entities();
  void set_allocated_entities(::record::Entity* entities);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntitySelectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::record::Entity* entities_;
  ::google::protobuf::uint32 shard_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Value

// .record.Value.ValueType type = 1;
inline void Value::clear_type() {
  type_ = 0;
}
inline ::record::Value_ValueType Value::type() const {
  // @@protoc_insertion_point(field_get:record.Value.type)
  return static_cast< ::record::Value_ValueType >(type_);
}
inline void Value::set_type(::record::Value_ValueType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:record.Value.type)
}

// sint32 value_s8 = 2;
inline void Value::clear_value_s8() {
  value_s8_ = 0;
}
inline ::google::protobuf::int32 Value::value_s8() const {
  // @@protoc_insertion_point(field_get:record.Value.value_s8)
  return value_s8_;
}
inline void Value::set_value_s8(::google::protobuf::int32 value) {
  
  value_s8_ = value;
  // @@protoc_insertion_point(field_set:record.Value.value_s8)
}

// uint32 value_u8 = 3;
inline void Value::clear_value_u8() {
  value_u8_ = 0u;
}
inline ::google::protobuf::uint32 Value::value_u8() const {
  // @@protoc_insertion_point(field_get:record.Value.value_u8)
  return value_u8_;
}
inline void Value::set_value_u8(::google::protobuf::uint32 value) {
  
  value_u8_ = value;
  // @@protoc_insertion_point(field_set:record.Value.value_u8)
}

// sint32 value_s32 = 4;
inline void Value::clear_value_s32() {
  value_s32_ = 0;
}
inline ::google::protobuf::int32 Value::value_s32() const {
  // @@protoc_insertion_point(field_get:record.Value.value_s32)
  return value_s32_;
}
inline void Value::set_value_s32(::google::protobuf::int32 value) {
  
  value_s32_ = value;
  // @@protoc_insertion_point(field_set:record.Value.value_s32)
}

// uint32 value_u32 = 5;
inline void Value::clear_value_u32() {
  value_u32_ = 0u;
}
inline ::google::protobuf::uint32 Value::value_u32() const {
  // @@protoc_insertion_point(field_get:record.Value.value_u32)
  return value_u32_;
}
inline void Value::set_value_u32(::google::protobuf::uint32 value) {
  
  value_u32_ = value;
  // @@protoc_insertion_point(field_set:record.Value.value_u32)
}

// sint64 value_s64 = 6;
inline void Value::clear_value_s64() {
  value_s64_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Value::value_s64() const {
  // @@protoc_insertion_point(field_get:record.Value.value_s64)
  return value_s64_;
}
inline void Value::set_value_s64(::google::protobuf::int64 value) {
  
  value_s64_ = value;
  // @@protoc_insertion_point(field_set:record.Value.value_s64)
}

// uint64 value_u64 = 7;
inline void Value::clear_value_u64() {
  value_u64_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Value::value_u64() const {
  // @@protoc_insertion_point(field_get:record.Value.value_u64)
  return value_u64_;
}
inline void Value::set_value_u64(::google::protobuf::uint64 value) {
  
  value_u64_ = value;
  // @@protoc_insertion_point(field_set:record.Value.value_u64)
}

// bool value_bool = 8;
inline void Value::clear_value_bool() {
  value_bool_ = false;
}
inline bool Value::value_bool() const {
  // @@protoc_insertion_point(field_get:record.Value.value_bool)
  return value_bool_;
}
inline void Value::set_value_bool(bool value) {
  
  value_bool_ = value;
  // @@protoc_insertion_point(field_set:record.Value.value_bool)
}

// float value_float = 9;
inline void Value::clear_value_float() {
  value_float_ = 0;
}
inline float Value::value_float() const {
  // @@protoc_insertion_point(field_get:record.Value.value_float)
  return value_float_;
}
inline void Value::set_value_float(float value) {
  
  value_float_ = value;
  // @@protoc_insertion_point(field_set:record.Value.value_float)
}

// double value_double = 10;
inline void Value::clear_value_double() {
  value_double_ = 0;
}
inline double Value::value_double() const {
  // @@protoc_insertion_point(field_get:record.Value.value_double)
  return value_double_;
}
inline void Value::set_value_double(double value) {
  
  value_double_ = value;
  // @@protoc_insertion_point(field_set:record.Value.value_double)
}

// string value_string = 11;
inline void Value::clear_value_string() {
  value_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Value::value_string() const {
  // @@protoc_insertion_point(field_get:record.Value.value_string)
  return value_string_.GetNoArena();
}
inline void Value::set_value_string(const ::std::string& value) {
  
  value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.Value.value_string)
}
#if LANG_CXX11
inline void Value::set_value_string(::std::string&& value) {
  
  value_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.Value.value_string)
}
#endif
inline void Value::set_value_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.Value.value_string)
}
inline void Value::set_value_string(const char* value, size_t size) {
  
  value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.Value.value_string)
}
inline ::std::string* Value::mutable_value_string() {
  
  // @@protoc_insertion_point(field_mutable:record.Value.value_string)
  return value_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_value_string() {
  // @@protoc_insertion_point(field_release:record.Value.value_string)
  
  return value_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_value_string(::std::string* value_string) {
  if (value_string != NULL) {
    
  } else {
    
  }
  value_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_string);
  // @@protoc_insertion_point(field_set_allocated:record.Value.value_string)
}

// bytes value_bytes = 12;
inline void Value::clear_value_bytes() {
  value_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Value::value_bytes() const {
  // @@protoc_insertion_point(field_get:record.Value.value_bytes)
  return value_bytes_.GetNoArena();
}
inline void Value::set_value_bytes(const ::std::string& value) {
  
  value_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.Value.value_bytes)
}
#if LANG_CXX11
inline void Value::set_value_bytes(::std::string&& value) {
  
  value_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.Value.value_bytes)
}
#endif
inline void Value::set_value_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.Value.value_bytes)
}
inline void Value::set_value_bytes(const void* value, size_t size) {
  
  value_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.Value.value_bytes)
}
inline ::std::string* Value::mutable_value_bytes() {
  
  // @@protoc_insertion_point(field_mutable:record.Value.value_bytes)
  return value_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_value_bytes() {
  // @@protoc_insertion_point(field_release:record.Value.value_bytes)
  
  return value_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_value_bytes(::std::string* value_bytes) {
  if (value_bytes != NULL) {
    
  } else {
    
  }
  value_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_bytes);
  // @@protoc_insertion_point(field_set_allocated:record.Value.value_bytes)
}

// string value_datetime = 13;
inline void Value::clear_value_datetime() {
  value_datetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Value::value_datetime() const {
  // @@protoc_insertion_point(field_get:record.Value.value_datetime)
  return value_datetime_.GetNoArena();
}
inline void Value::set_value_datetime(const ::std::string& value) {
  
  value_datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.Value.value_datetime)
}
#if LANG_CXX11
inline void Value::set_value_datetime(::std::string&& value) {
  
  value_datetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.Value.value_datetime)
}
#endif
inline void Value::set_value_datetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.Value.value_datetime)
}
inline void Value::set_value_datetime(const char* value, size_t size) {
  
  value_datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.Value.value_datetime)
}
inline ::std::string* Value::mutable_value_datetime() {
  
  // @@protoc_insertion_point(field_mutable:record.Value.value_datetime)
  return value_datetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_value_datetime() {
  // @@protoc_insertion_point(field_release:record.Value.value_datetime)
  
  return value_datetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_value_datetime(::std::string* value_datetime) {
  if (value_datetime != NULL) {
    
  } else {
    
  }
  value_datetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_datetime);
  // @@protoc_insertion_point(field_set_allocated:record.Value.value_datetime)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Entity

// uint64 id = 1;
inline void Entity::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Entity::id() const {
  // @@protoc_insertion_point(field_get:record.Entity.id)
  return id_;
}
inline void Entity::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:record.Entity.id)
}

// map<string, .record.Value> values = 2;
inline int Entity::values_size() const {
  return values_.size();
}
inline void Entity::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::record::Value >&
Entity::values() const {
  // @@protoc_insertion_point(field_map:record.Entity.values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::record::Value >*
Entity::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:record.Entity.values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// EntityCreateRequest

// uint32 shard = 1;
inline void EntityCreateRequest::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityCreateRequest::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateRequest.shard)
  return shard_;
}
inline void EntityCreateRequest::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityCreateRequest.shard)
}

// string table = 2;
inline void EntityCreateRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityCreateRequest::table() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateRequest.table)
  return table_.GetNoArena();
}
inline void EntityCreateRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityCreateRequest.table)
}
#if LANG_CXX11
inline void EntityCreateRequest::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityCreateRequest.table)
}
#endif
inline void EntityCreateRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityCreateRequest.table)
}
inline void EntityCreateRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityCreateRequest.table)
}
inline ::std::string* EntityCreateRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityCreateRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityCreateRequest::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityCreateRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityCreateRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityCreateRequest.table)
}

// .record.Entity entity = 3;
inline bool EntityCreateRequest::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline void EntityCreateRequest::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) {
    delete entity_;
  }
  entity_ = NULL;
}
inline const ::record::Entity& EntityCreateRequest::_internal_entity() const {
  return *entity_;
}
inline const ::record::Entity& EntityCreateRequest::entity() const {
  const ::record::Entity* p = entity_;
  // @@protoc_insertion_point(field_get:record.EntityCreateRequest.entity)
  return p != NULL ? *p : *reinterpret_cast<const ::record::Entity*>(
      &::record::_Entity_default_instance_);
}
inline ::record::Entity* EntityCreateRequest::release_entity() {
  // @@protoc_insertion_point(field_release:record.EntityCreateRequest.entity)
  
  ::record::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline ::record::Entity* EntityCreateRequest::mutable_entity() {
  
  if (entity_ == NULL) {
    auto* p = CreateMaybeMessage<::record::Entity>(GetArenaNoVirtual());
    entity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:record.EntityCreateRequest.entity)
  return entity_;
}
inline void EntityCreateRequest::set_allocated_entity(::record::Entity* entity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entity_;
  }
  if (entity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:record.EntityCreateRequest.entity)
}

// -------------------------------------------------------------------

// EntityCreateResponse

// uint32 shard = 1;
inline void EntityCreateResponse::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityCreateResponse::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateResponse.shard)
  return shard_;
}
inline void EntityCreateResponse::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityCreateResponse.shard)
}

// string table = 2;
inline void EntityCreateResponse::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityCreateResponse::table() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateResponse.table)
  return table_.GetNoArena();
}
inline void EntityCreateResponse::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityCreateResponse.table)
}
#if LANG_CXX11
inline void EntityCreateResponse::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityCreateResponse.table)
}
#endif
inline void EntityCreateResponse::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityCreateResponse.table)
}
inline void EntityCreateResponse::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityCreateResponse.table)
}
inline ::std::string* EntityCreateResponse::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityCreateResponse.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityCreateResponse::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityCreateResponse.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityCreateResponse::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityCreateResponse.table)
}

// uint64 entityid = 3;
inline void EntityCreateResponse::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EntityCreateResponse::entityid() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateResponse.entityid)
  return entityid_;
}
inline void EntityCreateResponse::set_entityid(::google::protobuf::uint64 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:record.EntityCreateResponse.entityid)
}

// -------------------------------------------------------------------

// EntityRetrieveRequest

// uint32 shard = 1;
inline void EntityRetrieveRequest::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityRetrieveRequest::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveRequest.shard)
  return shard_;
}
inline void EntityRetrieveRequest::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityRetrieveRequest.shard)
}

// string table = 2;
inline void EntityRetrieveRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityRetrieveRequest::table() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveRequest.table)
  return table_.GetNoArena();
}
inline void EntityRetrieveRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityRetrieveRequest.table)
}
#if LANG_CXX11
inline void EntityRetrieveRequest::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityRetrieveRequest.table)
}
#endif
inline void EntityRetrieveRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityRetrieveRequest.table)
}
inline void EntityRetrieveRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityRetrieveRequest.table)
}
inline ::std::string* EntityRetrieveRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityRetrieveRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityRetrieveRequest::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityRetrieveRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityRetrieveRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityRetrieveRequest.table)
}

// uint64 entityid = 3;
inline void EntityRetrieveRequest::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EntityRetrieveRequest::entityid() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveRequest.entityid)
  return entityid_;
}
inline void EntityRetrieveRequest::set_entityid(::google::protobuf::uint64 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:record.EntityRetrieveRequest.entityid)
}

// -------------------------------------------------------------------

// EntityRetrieveResponse

// uint32 shard = 1;
inline void EntityRetrieveResponse::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityRetrieveResponse::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveResponse.shard)
  return shard_;
}
inline void EntityRetrieveResponse::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityRetrieveResponse.shard)
}

// string table = 2;
inline void EntityRetrieveResponse::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityRetrieveResponse::table() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveResponse.table)
  return table_.GetNoArena();
}
inline void EntityRetrieveResponse::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityRetrieveResponse.table)
}
#if LANG_CXX11
inline void EntityRetrieveResponse::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityRetrieveResponse.table)
}
#endif
inline void EntityRetrieveResponse::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityRetrieveResponse.table)
}
inline void EntityRetrieveResponse::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityRetrieveResponse.table)
}
inline ::std::string* EntityRetrieveResponse::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityRetrieveResponse.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityRetrieveResponse::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityRetrieveResponse.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityRetrieveResponse::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityRetrieveResponse.table)
}

// .record.Entity entity = 3;
inline bool EntityRetrieveResponse::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline void EntityRetrieveResponse::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) {
    delete entity_;
  }
  entity_ = NULL;
}
inline const ::record::Entity& EntityRetrieveResponse::_internal_entity() const {
  return *entity_;
}
inline const ::record::Entity& EntityRetrieveResponse::entity() const {
  const ::record::Entity* p = entity_;
  // @@protoc_insertion_point(field_get:record.EntityRetrieveResponse.entity)
  return p != NULL ? *p : *reinterpret_cast<const ::record::Entity*>(
      &::record::_Entity_default_instance_);
}
inline ::record::Entity* EntityRetrieveResponse::release_entity() {
  // @@protoc_insertion_point(field_release:record.EntityRetrieveResponse.entity)
  
  ::record::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline ::record::Entity* EntityRetrieveResponse::mutable_entity() {
  
  if (entity_ == NULL) {
    auto* p = CreateMaybeMessage<::record::Entity>(GetArenaNoVirtual());
    entity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:record.EntityRetrieveResponse.entity)
  return entity_;
}
inline void EntityRetrieveResponse::set_allocated_entity(::record::Entity* entity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entity_;
  }
  if (entity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:record.EntityRetrieveResponse.entity)
}

// -------------------------------------------------------------------

// EntityUpdateRequest

// uint32 shard = 1;
inline void EntityUpdateRequest::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityUpdateRequest::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateRequest.shard)
  return shard_;
}
inline void EntityUpdateRequest::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityUpdateRequest.shard)
}

// string table = 2;
inline void EntityUpdateRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityUpdateRequest::table() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateRequest.table)
  return table_.GetNoArena();
}
inline void EntityUpdateRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityUpdateRequest.table)
}
#if LANG_CXX11
inline void EntityUpdateRequest::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityUpdateRequest.table)
}
#endif
inline void EntityUpdateRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityUpdateRequest.table)
}
inline void EntityUpdateRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityUpdateRequest.table)
}
inline ::std::string* EntityUpdateRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityUpdateRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityUpdateRequest::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityUpdateRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityUpdateRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityUpdateRequest.table)
}

// .record.Entity entity = 3;
inline bool EntityUpdateRequest::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline void EntityUpdateRequest::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) {
    delete entity_;
  }
  entity_ = NULL;
}
inline const ::record::Entity& EntityUpdateRequest::_internal_entity() const {
  return *entity_;
}
inline const ::record::Entity& EntityUpdateRequest::entity() const {
  const ::record::Entity* p = entity_;
  // @@protoc_insertion_point(field_get:record.EntityUpdateRequest.entity)
  return p != NULL ? *p : *reinterpret_cast<const ::record::Entity*>(
      &::record::_Entity_default_instance_);
}
inline ::record::Entity* EntityUpdateRequest::release_entity() {
  // @@protoc_insertion_point(field_release:record.EntityUpdateRequest.entity)
  
  ::record::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline ::record::Entity* EntityUpdateRequest::mutable_entity() {
  
  if (entity_ == NULL) {
    auto* p = CreateMaybeMessage<::record::Entity>(GetArenaNoVirtual());
    entity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:record.EntityUpdateRequest.entity)
  return entity_;
}
inline void EntityUpdateRequest::set_allocated_entity(::record::Entity* entity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entity_;
  }
  if (entity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:record.EntityUpdateRequest.entity)
}

// -------------------------------------------------------------------

// EntityUpdateResponse

// uint32 shard = 1;
inline void EntityUpdateResponse::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityUpdateResponse::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateResponse.shard)
  return shard_;
}
inline void EntityUpdateResponse::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityUpdateResponse.shard)
}

// string table = 2;
inline void EntityUpdateResponse::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityUpdateResponse::table() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateResponse.table)
  return table_.GetNoArena();
}
inline void EntityUpdateResponse::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityUpdateResponse.table)
}
#if LANG_CXX11
inline void EntityUpdateResponse::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityUpdateResponse.table)
}
#endif
inline void EntityUpdateResponse::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityUpdateResponse.table)
}
inline void EntityUpdateResponse::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityUpdateResponse.table)
}
inline ::std::string* EntityUpdateResponse::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityUpdateResponse.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityUpdateResponse::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityUpdateResponse.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityUpdateResponse::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityUpdateResponse.table)
}

// bool result = 3;
inline void EntityUpdateResponse::clear_result() {
  result_ = false;
}
inline bool EntityUpdateResponse::result() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateResponse.result)
  return result_;
}
inline void EntityUpdateResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:record.EntityUpdateResponse.result)
}

// -------------------------------------------------------------------

// EntityDeleteRequest

// uint32 shard = 1;
inline void EntityDeleteRequest::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityDeleteRequest::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteRequest.shard)
  return shard_;
}
inline void EntityDeleteRequest::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityDeleteRequest.shard)
}

// string table = 2;
inline void EntityDeleteRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityDeleteRequest::table() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteRequest.table)
  return table_.GetNoArena();
}
inline void EntityDeleteRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityDeleteRequest.table)
}
#if LANG_CXX11
inline void EntityDeleteRequest::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityDeleteRequest.table)
}
#endif
inline void EntityDeleteRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityDeleteRequest.table)
}
inline void EntityDeleteRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityDeleteRequest.table)
}
inline ::std::string* EntityDeleteRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityDeleteRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityDeleteRequest::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityDeleteRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityDeleteRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityDeleteRequest.table)
}

// uint64 entityid = 3;
inline void EntityDeleteRequest::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EntityDeleteRequest::entityid() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteRequest.entityid)
  return entityid_;
}
inline void EntityDeleteRequest::set_entityid(::google::protobuf::uint64 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:record.EntityDeleteRequest.entityid)
}

// -------------------------------------------------------------------

// EntityDeleteResponse

// uint32 shard = 1;
inline void EntityDeleteResponse::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityDeleteResponse::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteResponse.shard)
  return shard_;
}
inline void EntityDeleteResponse::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityDeleteResponse.shard)
}

// string table = 2;
inline void EntityDeleteResponse::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityDeleteResponse::table() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteResponse.table)
  return table_.GetNoArena();
}
inline void EntityDeleteResponse::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityDeleteResponse.table)
}
#if LANG_CXX11
inline void EntityDeleteResponse::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityDeleteResponse.table)
}
#endif
inline void EntityDeleteResponse::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityDeleteResponse.table)
}
inline void EntityDeleteResponse::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityDeleteResponse.table)
}
inline ::std::string* EntityDeleteResponse::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityDeleteResponse.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityDeleteResponse::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityDeleteResponse.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityDeleteResponse::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityDeleteResponse.table)
}

// bool result = 3;
inline void EntityDeleteResponse::clear_result() {
  result_ = false;
}
inline bool EntityDeleteResponse::result() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteResponse.result)
  return result_;
}
inline void EntityDeleteResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:record.EntityDeleteResponse.result)
}

// -------------------------------------------------------------------

// EntitySelectRequest

// uint32 shard = 1;
inline void EntitySelectRequest::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntitySelectRequest::shard() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectRequest.shard)
  return shard_;
}
inline void EntitySelectRequest::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntitySelectRequest.shard)
}

// string table = 2;
inline void EntitySelectRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntitySelectRequest::table() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectRequest.table)
  return table_.GetNoArena();
}
inline void EntitySelectRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntitySelectRequest.table)
}
#if LANG_CXX11
inline void EntitySelectRequest::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntitySelectRequest.table)
}
#endif
inline void EntitySelectRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntitySelectRequest.table)
}
inline void EntitySelectRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntitySelectRequest.table)
}
inline ::std::string* EntitySelectRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntitySelectRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntitySelectRequest::release_table() {
  // @@protoc_insertion_point(field_release:record.EntitySelectRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntitySelectRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntitySelectRequest.table)
}

// string where = 3;
inline void EntitySelectRequest::clear_where() {
  where_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntitySelectRequest::where() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectRequest.where)
  return where_.GetNoArena();
}
inline void EntitySelectRequest::set_where(const ::std::string& value) {
  
  where_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntitySelectRequest.where)
}
#if LANG_CXX11
inline void EntitySelectRequest::set_where(::std::string&& value) {
  
  where_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntitySelectRequest.where)
}
#endif
inline void EntitySelectRequest::set_where(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  where_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntitySelectRequest.where)
}
inline void EntitySelectRequest::set_where(const char* value, size_t size) {
  
  where_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntitySelectRequest.where)
}
inline ::std::string* EntitySelectRequest::mutable_where() {
  
  // @@protoc_insertion_point(field_mutable:record.EntitySelectRequest.where)
  return where_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntitySelectRequest::release_where() {
  // @@protoc_insertion_point(field_release:record.EntitySelectRequest.where)
  
  return where_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntitySelectRequest::set_allocated_where(::std::string* where) {
  if (where != NULL) {
    
  } else {
    
  }
  where_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where);
  // @@protoc_insertion_point(field_set_allocated:record.EntitySelectRequest.where)
}

// -------------------------------------------------------------------

// EntitySelectResponse

// uint32 shard = 1;
inline void EntitySelectResponse::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntitySelectResponse::shard() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectResponse.shard)
  return shard_;
}
inline void EntitySelectResponse::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntitySelectResponse.shard)
}

// string table = 2;
inline void EntitySelectResponse::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntitySelectResponse::table() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectResponse.table)
  return table_.GetNoArena();
}
inline void EntitySelectResponse::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntitySelectResponse.table)
}
#if LANG_CXX11
inline void EntitySelectResponse::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntitySelectResponse.table)
}
#endif
inline void EntitySelectResponse::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntitySelectResponse.table)
}
inline void EntitySelectResponse::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntitySelectResponse.table)
}
inline ::std::string* EntitySelectResponse::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntitySelectResponse.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntitySelectResponse::release_table() {
  // @@protoc_insertion_point(field_release:record.EntitySelectResponse.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntitySelectResponse::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntitySelectResponse.table)
}

// .record.Entity entities = 3;
inline bool EntitySelectResponse::has_entities() const {
  return this != internal_default_instance() && entities_ != NULL;
}
inline void EntitySelectResponse::clear_entities() {
  if (GetArenaNoVirtual() == NULL && entities_ != NULL) {
    delete entities_;
  }
  entities_ = NULL;
}
inline const ::record::Entity& EntitySelectResponse::_internal_entities() const {
  return *entities_;
}
inline const ::record::Entity& EntitySelectResponse::entities() const {
  const ::record::Entity* p = entities_;
  // @@protoc_insertion_point(field_get:record.EntitySelectResponse.entities)
  return p != NULL ? *p : *reinterpret_cast<const ::record::Entity*>(
      &::record::_Entity_default_instance_);
}
inline ::record::Entity* EntitySelectResponse::release_entities() {
  // @@protoc_insertion_point(field_release:record.EntitySelectResponse.entities)
  
  ::record::Entity* temp = entities_;
  entities_ = NULL;
  return temp;
}
inline ::record::Entity* EntitySelectResponse::mutable_entities() {
  
  if (entities_ == NULL) {
    auto* p = CreateMaybeMessage<::record::Entity>(GetArenaNoVirtual());
    entities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:record.EntitySelectResponse.entities)
  return entities_;
}
inline void EntitySelectResponse::set_allocated_entities(::record::Entity* entities) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entities_;
  }
  if (entities) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entities = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entities, submessage_arena);
    }
    
  } else {
    
  }
  entities_ = entities;
  // @@protoc_insertion_point(field_set_allocated:record.EntitySelectResponse.entities)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace record

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::record::Value_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::record::Value_ValueType>() {
  return ::record::Value_ValueType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_record_2eproto
